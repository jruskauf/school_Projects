;
; File generated by cc65 v 2.17 - Debian 2.17-1
;
	.fopt		compiler,"cc65 v 2.17 - Debian 2.17-1"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.importzp	_FrameCount
	.export		_TEXT
	.export		_PALETTES
	.export		_ATTRIBUTES
	.export		_i
	.export		_attr_offset
	.export		_ppu_addr
	.export		_ppu_data
	.export		_ppu_data_size
	.export		_ResetScroll
	.export		_EnablePPU
	.export		_WritePPU
	.export		_main

.segment	"RODATA"

_TEXT:
	.byte	$48,$65,$6C,$6C,$6F,$2C,$20,$57,$6F,$72,$6C,$64,$21,$00
_PALETTES:
	.byte	$12
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$28
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$20
_ATTRIBUTES:
	.byte	$00
	.byte	$90
	.byte	$40
	.byte	$E0
	.byte	$80
	.byte	$40
	.byte	$20
	.byte	$D0
	.byte	$40
	.byte	$20
	.byte	$90
	.byte	$C0

.segment	"BSS"

.segment	"ZEROPAGE"
_i:
	.res	1,$00
_attr_offset:
	.res	1,$00
_ppu_addr:
	.res	2,$00
_ppu_data:
	.res	2,$00
_ppu_data_size:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ ResetScroll (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ResetScroll: near

.segment	"CODE"

;
; PPU_SCROLL = 0x00;
;
	lda     #$00
	sta     $2005
;
; PPU_SCROLL = 0x00;
;
	sta     $2005
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ EnablePPU (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_EnablePPU: near

.segment	"CODE"

;
; PPU_CTRL = PPUCTRL_NAMETABLE_0 | PPUCTRL_BPATTERN_0 | PPUCTRL_NMI_ON;
;
	lda     #$80
	sta     $2000
;
; PPU_MASK = PPUMASK_COLOR       | PPUMASK_BSHOW;
;
	lda     #$08
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ WritePPU (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_WritePPU: near

.segment	"CODE"

;
; PPU_ADDRESS = (uint8_t)(ppu_addr >> 8);
;
	lda     _ppu_addr+1
	sta     $2006
;
; PPU_ADDRESS = (uint8_t)(ppu_addr);
;
	lda     _ppu_addr
	sta     $2006
;
; for (i = 0; i < ppu_data_size; ++i)
;
	lda     #$00
	sta     _i
L0085:	lda     _i
	cmp     _ppu_data_size
	bcs     L0039
;
; PPU_DATA = ppu_data[i];
;
	lda     _ppu_data
	ldx     _ppu_data+1
	ldy     _i
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     $2007
;
; for (i = 0; i < ppu_data_size; ++i)
;
	inc     _i
	jmp     L0085
;
; }
;
L0039:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_addr = PPU_PALETTE;
;
	ldx     #$3F
	lda     #$00
	sta     _ppu_addr
	stx     _ppu_addr+1
;
; ppu_data = PALETTES;
;
	lda     #<(_PALETTES)
	sta     _ppu_data
	lda     #>(_PALETTES)
	sta     _ppu_data+1
;
; ppu_data_size = sizeof(PALETTES);
;
	lda     #$10
	sta     _ppu_data_size
;
; WritePPU();
;
	jsr     _WritePPU
;
; ppu_addr = PPU_NAMETABLE_0 + TEXT_OFFSET;
;
	ldx     #$21
	lda     #$CA
	sta     _ppu_addr
	stx     _ppu_addr+1
;
; ppu_data = (uint8_t const *) TEXT;
;
	lda     #<(_TEXT)
	sta     _ppu_data
	lda     #>(_TEXT)
	sta     _ppu_data+1
;
; ppu_data_size = sizeof(TEXT);
;
	lda     #$0E
	sta     _ppu_data_size
;
; WritePPU();
;
	jsr     _WritePPU
;
; ppu_addr = PPU_NAMETABLE_0 + (TEXT_OFFSET + 32);
;
	ldx     #$21
	lda     #$EA
	sta     _ppu_addr
	stx     _ppu_addr+1
;
; ppu_data = (uint8_t const *) TEXT;
;
	lda     #<(_TEXT)
	sta     _ppu_data
	lda     #>(_TEXT)
	sta     _ppu_data+1
;
; ppu_data_size = sizeof(TEXT);
;
	lda     #$0E
	sta     _ppu_data_size
;
; WritePPU();
;
	jsr     _WritePPU
;
; ppu_addr = PPU_ATTRIB_TABLE_0 + ATTR_OFFSET;
;
	ldx     #$23
	lda     #$DA
	sta     _ppu_addr
	stx     _ppu_addr+1
;
; ppu_data = ATTRIBUTES;
;
	lda     #<(_ATTRIBUTES)
	sta     _ppu_data
	lda     #>(_ATTRIBUTES)
	sta     _ppu_data+1
;
; ppu_data_size = ATTR_SIZE;
;
	lda     #$04
	sta     _ppu_data_size
;
; WritePPU();
;
	jsr     _WritePPU
;
; ResetScroll();
;
	jsr     _ResetScroll
;
; EnablePPU();
;
	jsr     _EnablePPU
;
; attr_offset = ATTR_SIZE;
;
	lda     #$04
	sta     _attr_offset
;
; if (FrameCount == (FRAMES_PER_SEC / 2))
;
L0086:	lda     _FrameCount
	cmp     #$1E
	bne     L0086
;
; ppu_data = ATTRIBUTES + attr_offset;
;
	lda     _attr_offset
	clc
	adc     #<(_ATTRIBUTES)
	sta     _ppu_data
	lda     #$00
	adc     #>(_ATTRIBUTES)
	sta     _ppu_data+1
;
; WritePPU();
;
	jsr     _WritePPU
;
; attr_offset = attr_offset + ATTR_SIZE;
;
	lda     _attr_offset
	clc
	adc     #$04
	sta     _attr_offset
;
; if (attr_offset == sizeof (ATTRIBUTES))
;
	cmp     #$0C
	bne     L007C
;
; attr_offset = 0;
;
	lda     #$00
	sta     _attr_offset
;
; ResetScroll();
;
L007C:	jsr     _ResetScroll
;
; FrameCount = 0;
;
	lda     #$00
	sta     _FrameCount
;
; while(1)
;
	jmp     L0086

.endproc

