;
; File generated by cc65 v 2.17 - Debian 2.17-1
;
	.fopt		compiler,"cc65 v 2.17 - Debian 2.17-1"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.importzp	_InputPort1
	.importzp	_InputPort2
	.import		_WaitFrame
	.export		_PALETTES
	.export		_i
	.export		_j
	.export		_p1d
	.export		_p2d
	.export		_m1d
	.export		_m2d
	.export		_m1t
	.export		_m2t
	.export		_ppu_addr
	.export		_ppu_data
	.export		_ppu_data_size
	.export		_player1
	.export		_player2
	.export		_missile1
	.export		_missile2
	.export		_ResetScroll
	.export		_EnablePPU
	.export		_WritePPU
	.export		_DrawBackground
	.export		_main

.segment	"RODATA"

_PALETTES:
	.byte	$0F
	.byte	$12
	.byte	$20
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$00
	.byte	$20
	.byte	$10
	.byte	$0F
	.byte	$28
	.byte	$1A
	.byte	$12
	.byte	$0F
	.byte	$16
	.byte	$16
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00

.segment	"BSS"

.segment	"ZEROPAGE"
_i:
	.res	1,$00
_j:
	.res	1,$00
_p1d:
	.res	1,$00
_p2d:
	.res	1,$00
_m1d:
	.res	1,$00
_m2d:
	.res	1,$00
_m1t:
	.res	1,$00
_m2t:
	.res	1,$00
_ppu_addr:
	.res	2,$00
_ppu_data:
	.res	2,$00
_ppu_data_size:
	.res	1,$00
.segment	"OAM"
_player1:
	.res	4,$00
_player2:
	.res	4,$00
_missile1:
	.res	4,$00
_missile2:
	.res	4,$00

; ---------------------------------------------------------------
; void __near__ ResetScroll (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ResetScroll: near

.segment	"CODE"

;
; PPU_SCROLL = 0x00;
;
	lda     #$00
	sta     $2005
;
; PPU_SCROLL = 0x00;
;
	sta     $2005
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ EnablePPU (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_EnablePPU: near

.segment	"CODE"

;
; PPU_CTRL = PPUCTRL_NAMETABLE_0 | PPUCTRL_BPATTERN_0 | PPUCTRL_NMI_ON;
;
	lda     #$80
	sta     $2000
;
; PPUMASK_SSHOW       | PPUMASK_L8_SSHOW;;
;
	lda     #$1E
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ WritePPU (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_WritePPU: near

.segment	"CODE"

;
; PPU_ADDRESS = (uint8_t)(ppu_addr >> 8);
;
	lda     _ppu_addr+1
	sta     $2006
;
; PPU_ADDRESS = (uint8_t)(ppu_addr);
;
	lda     _ppu_addr
	sta     $2006
;
; for (i = 0; i < ppu_data_size; ++i) 
;
	lda     #$00
	sta     _i
L0174:	lda     _i
	cmp     _ppu_data_size
	bcs     L0042
;
; PPU_DATA = ppu_data[i];
;
	lda     _ppu_data
	ldx     _ppu_data+1
	ldy     _i
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     $2007
;
; for (i = 0; i < ppu_data_size; ++i) 
;
	inc     _i
	jmp     L0174
;
; }
;
L0042:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ DrawBackground (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DrawBackground: near

.segment	"CODE"

;
; PPU_ADDRESS = (uint8_t)((PPU_NAMETABLE_0 + NAMETABLE_OFFSET) >> 8);
;
	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = (uint8_t) (PPU_NAMETABLE_0 + NAMETABLE_OFFSET);
;
	sta     $2006
;
; PPU_DATA = BORDER_TL;
;
	lda     #$01
	sta     $2007
;
; for(i = 0; i < (NUM_COLS - 2); ++i)
;
	lda     #$00
	sta     _i
L0175:	lda     _i
	cmp     #$1E
	bcs     L0176
;
; PPU_DATA = BORDER_T;
;
	lda     #$04
	sta     $2007
;
; for(i = 0; i < (NUM_COLS - 2); ++i)
;
	inc     _i
	jmp     L0175
;
; PPU_DATA = BORDER_TR;
;
L0176:	lda     #$02
	sta     $2007
;
; for (i = 0; i < (NUM_ROWS - 2); ++i)
;
	lda     #$00
	sta     _i
L0177:	lda     _i
	cmp     #$1A
	bcs     L017A
;
; PPU_DATA = BORDER_L;
;
	lda     #$03
	sta     $2007
;
; for (j = 0; j < (NUM_COLS - 2); ++j)
;
	lda     #$00
	sta     _j
L0178:	lda     _j
	cmp     #$1E
	bcs     L0179
;
; PPU_DATA = BLANK_TILE;
;
	lda     #$00
	sta     $2007
;
; for (j = 0; j < (NUM_COLS - 2); ++j)
;
	inc     _j
	jmp     L0178
;
; PPU_DATA = BORDER_R;
;
L0179:	lda     #$13
	sta     $2007
;
; for (i = 0; i < (NUM_ROWS - 2); ++i)
;
	inc     _i
	jmp     L0177
;
; PPU_DATA = BORDER_BL;
;
L017A:	lda     #$11
	sta     $2007
;
; for(i = 0; i < (NUM_COLS - 2); ++i)
;
	lda     #$00
	sta     _i
L017B:	lda     _i
	cmp     #$1E
	bcs     L017C
;
; PPU_DATA = BORDER_B;
;
	lda     #$14
	sta     $2007
;
; for(i = 0; i < (NUM_COLS - 2); ++i)
;
	inc     _i
	jmp     L017B
;
; PPU_DATA = BORDER_BR;
;
L017C:	lda     #$12
	sta     $2007
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_addr           = PPU_PALETTE;
;
	ldx     #$3F
	lda     #$00
	sta     _ppu_addr
	stx     _ppu_addr+1
;
; ppu_data           = PALETTES;
;
	lda     #<(_PALETTES)
	sta     _ppu_data
	lda     #>(_PALETTES)
	sta     _ppu_data+1
;
; ppu_data_size      = sizeof(PALETTES);
;
	lda     #$20
	sta     _ppu_data_size
;
; WritePPU();
;
	jsr     _WritePPU
;
; DrawBackground();
;
	jsr     _DrawBackground
;
; player1.x           = (MAX_X / 2) - (SPRITE_WIDTH  / 2) - 50;
;
	lda     #$4A
	sta     _player1+3
;
; player1.y           = (MAX_Y / 2) - (SPRITE_HEIGHT / 2);
;
	lda     #$6F
	sta     _player1
;
; player1.tile_index  = SPRITE_PLAYER;
;
	lda     #$10
	sta     _player1+1
;
; player1.attributes  = player1.attributes & 0x00;
;
	lda     #$00
	sta     _player1+2
;
; missile1.x           = -2;
;
	lda     #$FE
	sta     _missile1+3
;
; missile1.y           = -2;
;
	sta     _missile1
;
; missile1.tile_index  = SPRITE_MISSILE1;
;
	lda     #$2E
	sta     _missile1+1
;
; missile1.attributes  = missile1.attributes & 0x00;
;
	lda     #$00
	sta     _missile1+2
;
; missile1.attributes  = missile1.attributes | 0x02;
;
	lda     #$02
	sta     _missile1+2
;
; player2.x           = (MAX_X / 2) - (SPRITE_WIDTH  / 2) + 50;
;
	lda     #$AE
	sta     _player2+3
;
; player2.y           = (MAX_Y / 2) - (SPRITE_HEIGHT / 2);
;
	lda     #$6F
	sta     _player2
;
; player2.tile_index  = SPRITE_PLAYER;
;
	lda     #$10
	sta     _player2+1
;
; player2.attributes  = player2.attributes & 0x00;
;
	lda     #$00
	sta     _player2+2
;
; player2.attributes  = player2.attributes | 0x01;
;
	lda     #$01
	sta     _player2+2
;
; missile2.x           = -2;
;
	lda     #$FE
	sta     _missile2+3
;
; missile2.y           = -2;
;
	sta     _missile2
;
; missile2.tile_index  = SPRITE_MISSILE2;
;
	lda     #$6F
	sta     _missile2+1
;
; missile2.attributes  = missile2.attributes & 0x00;
;
	lda     #$00
	sta     _missile2+2
;
; missile2.attributes  = missile2.attributes | 0x02;
;
	lda     #$02
	sta     _missile2+2
;
; ResetScroll();
;
	jsr     _ResetScroll
;
; EnablePPU();
;
	jsr     _EnablePPU
;
; WaitFrame();
;
L00D2:	jsr     _WaitFrame
;
; ResetScroll();
;
	jsr     _ResetScroll
;
; if (InputPort1 & BUTTON_UP)
;
	lda     _InputPort1
	and     #$08
	beq     L0181
;
; if (player1.y > MIN_Y + SPRITE_HEIGHT)
;
	lda     _player1
	cmp     #$11
	bcc     L0181
;
; --player1.y;
;
	dec     _player1
;
; p1d = UP;
;
	lda     #$00
	sta     _p1d
;
; if (InputPort1 & BUTTON_DOWN)
;
L0181:	lda     _InputPort1
	and     #$04
	beq     L0182
;
; if (player1.y < MAX_Y - (2 * SPRITE_HEIGHT))
;
	lda     _player1
	cmp     #$D7
	bcs     L0182
;
; ++player1.y;
;
	inc     _player1
;
; p1d = DOWN;
;
	lda     #$01
	sta     _p1d
;
; if (InputPort1 & BUTTON_LEFT)
;
L0182:	lda     _InputPort1
	and     #$02
	beq     L0183
;
; if (player1.x > MIN_X + SPRITE_WIDTH)
;
	lda     _player1+3
	cmp     #$09
	bcc     L0183
;
; --player1.x;
;
	dec     _player1+3
;
; p1d = LEFT;
;
	lda     #$02
	sta     _p1d
;
; if (InputPort1 & BUTTON_RIGHT)
;
L0183:	lda     _InputPort1
	and     #$01
	beq     L0184
;
; if (player1.x < MAX_X - (2 * SPRITE_WIDTH))
;
	lda     _player1+3
	cmp     #$F0
	bcs     L0184
;
; ++player1.x;
;
	inc     _player1+3
;
; p1d = RIGHT;
;
	lda     #$03
	sta     _p1d
;
; if (InputPort1 & BUTTON_B)
;
L0184:	lda     _InputPort1
	and     #$40
	beq     L0185
;
; m1d         = p1d; // set missile direction to player dir
;
	lda     _p1d
	sta     _m1d
;
; m1t         = 0;   // reset missile1 tally
;
	lda     #$00
	sta     _m1t
;
; missile1.x  = player1.x;
;
	lda     _player1+3
	sta     _missile1+3
;
; missile1.y  = player1.y;
;
	lda     _player1
	sta     _missile1
;
; if ((missile1.x != 0) && (missile1.y != 0))
;
L0185:	lda     _missile1+3
	beq     L018D
	lda     _missile1
	beq     L018D
;
; if (m1d == UP)
;
	lda     _m1d
	bne     L0189
;
; --missile1.y;
;
	dec     _missile1
;
; else if (m1d == DOWN)
;
	jmp     L018C
L0189:	lda     _m1d
	cmp     #$01
	bne     L018A
;
; ++missile1.y;
;
	inc     _missile1
;
; else if (m1d == LEFT)
;
	jmp     L018C
L018A:	lda     _m1d
	cmp     #$02
	bne     L018B
;
; --missile1.x;
;
	dec     _missile1+3
;
; else
;
	jmp     L018C
;
; ++missile1.x;
;
L018B:	inc     _missile1+3
;
; ++m1t;
;
L018C:	inc     _m1t
;
; if (m1d         >  64)
;
L018D:	lda     _m1d
	cmp     #$41
	bcc     L018E
;
; missile1.tile_index = SPRITE_MISSILE2;
;
	lda     #$6F
;
; else
;
	jmp     L017E
;
; missile1.tile_index = SPRITE_MISSILE1;
;
L018E:	lda     #$2E
L017E:	sta     _missile1+1
;
; if ((missile1.x <= 0)     ||
;
	lda     _missile1+3
	beq     L018F
;
; (missile1.y <= 0)     ||
;
	lda     _missile1
	beq     L018F
;
; (missile1.y >= MAX_Y))
;
	cmp     #$E7
	bcc     L0190
;
; missile1.x = -2;
;
L018F:	lda     #$FE
	sta     _missile1+3
;
; missile1.y = -2;
;
	sta     _missile1
;
; if (InputPort2 & BUTTON_UP)
;
L0190:	lda     _InputPort2
	and     #$08
	beq     L0191
;
; if (player2.y > MIN_Y + SPRITE_HEIGHT)
;
	lda     _player2
	cmp     #$11
	bcc     L0191
;
; --player2.y;
;
	dec     _player2
;
; p2d = UP;
;
	lda     #$00
	sta     _p2d
;
; if (InputPort2 & BUTTON_DOWN)
;
L0191:	lda     _InputPort2
	and     #$04
	beq     L0192
;
; if (player2.y < MAX_Y - (2 * SPRITE_HEIGHT))
;
	lda     _player2
	cmp     #$D7
	bcs     L0192
;
; ++player2.y;
;
	inc     _player2
;
; p2d = DOWN;
;
	lda     #$01
	sta     _p2d
;
; if (InputPort2 & BUTTON_LEFT)
;
L0192:	lda     _InputPort2
	and     #$02
	beq     L0193
;
; if (player2.x > MIN_X + SPRITE_WIDTH)
;
	lda     _player2+3
	cmp     #$09
	bcc     L0193
;
; --player2.x;
;
	dec     _player2+3
;
; p2d = LEFT;
;
	lda     #$02
	sta     _p2d
;
; if (InputPort2 & BUTTON_RIGHT)
;
L0193:	lda     _InputPort2
	and     #$01
	beq     L0194
;
; if (player2.x < MAX_X - (2 * SPRITE_WIDTH))
;
	lda     _player2+3
	cmp     #$F0
	bcs     L0194
;
; ++player2.x;
;
	inc     _player2+3
;
; p2d = RIGHT;
;
	lda     #$03
	sta     _p2d
;
; if (InputPort2 & BUTTON_B)
;
L0194:	lda     _InputPort2
	and     #$40
	beq     L0195
;
; m2d         = p2d; // set missile direction to player dir
;
	lda     _p2d
	sta     _m2d
;
; m2t         = 0;
;
	lda     #$00
	sta     _m2t
;
; missile2.x  = player2.x;
;
	lda     _player2+3
	sta     _missile2+3
;
; missile2.y  = player2.y;
;
	lda     _player2
	sta     _missile2
;
; if ((missile2.x != 0) && (missile2.y != 0))
;
L0195:	lda     _missile2+3
	beq     L019C
	lda     _missile2
	beq     L019C
;
; if (m2d == UP)
;
	lda     _m2d
	bne     L0199
;
; --missile2.y;
;
	dec     _missile2
;
; else if (m2d == DOWN)
;
	jmp     L019C
L0199:	lda     _m2d
	cmp     #$01
	bne     L019A
;
; ++missile2.y;
;
	inc     _missile2
;
; else if (m2d == LEFT)
;
	jmp     L019C
L019A:	lda     _m2d
	cmp     #$02
	bne     L019B
;
; --missile2.x;
;
	dec     _missile2+3
;
; else
;
	jmp     L019C
;
; ++missile2.x;
;
L019B:	inc     _missile2+3
;
; if (m2d         >  64)
;
L019C:	lda     _m2d
	cmp     #$41
	bcc     L019D
;
; missile2.tile_index = SPRITE_MISSILE2;
;
	lda     #$6F
;
; else
;
	jmp     L0180
;
; missile2.tile_index = SPRITE_MISSILE1;
;
L019D:	lda     #$2E
L0180:	sta     _missile2+1
;
; if ((missile2.x <= 0)     ||
;
	lda     _missile2+3
	beq     L019E
;
; (missile2.y <= 0)     ||
;
	lda     _missile2
	beq     L019E
;
; (missile2.y >= MAX_Y))
;
	cmp     #$E7
	jcc     L00D2
;
; missile2.x = -2;
;
L019E:	lda     #$FE
	sta     _missile2+3
;
; missile2.y = -2;
;
	sta     _missile2
;
; while (1)
;
	jmp     L00D2

.endproc

