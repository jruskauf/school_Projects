;
; File generated by cc65 v 2.17 - Debian 2.17-1
;
	.fopt		compiler,"cc65 v 2.17 - Debian 2.17-1"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.importzp	_InputPort1
	.importzp	_InputPort2
	.import		_WaitFrame
	.export		_PALETTES
	.export		_SPEED
	.export		_i
	.export		_j
	.export		_ppu_addr
	.export		_ppu_data
	.export		_ppu_data_size
	.export		_player1
	.export		_player2
	.export		_ResetScroll
	.export		_EnablePPU
	.export		_WritePPU
	.export		_DrawBackground
	.export		_main

.segment	"DATA"

_SPEED:
	.word	$0001

.segment	"RODATA"

_PALETTES:
	.byte	$0F
	.byte	$12
	.byte	$20
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$00
	.byte	$20
	.byte	$10
	.byte	$0F
	.byte	$28
	.byte	$1A
	.byte	$12
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00

.segment	"BSS"

.segment	"ZEROPAGE"
_i:
	.res	1,$00
_j:
	.res	1,$00
_ppu_addr:
	.res	2,$00
_ppu_data:
	.res	2,$00
_ppu_data_size:
	.res	1,$00
.segment	"OAM"
_player1:
	.res	4,$00
_player2:
	.res	4,$00

; ---------------------------------------------------------------
; void __near__ ResetScroll (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ResetScroll: near

.segment	"CODE"

;
; PPU_SCROLL = 0x00;
;
	lda     #$00
	sta     $2005
;
; PPU_SCROLL = 0x00;
;
	sta     $2005
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ EnablePPU (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_EnablePPU: near

.segment	"CODE"

;
; PPU_CTRL = PPUCTRL_NAMETABLE_0 | PPUCTRL_BPATTERN_0 | PPUCTRL_NMI_ON;
;
	lda     #$80
	sta     $2000
;
; PPUMASK_SSHOW       | PPUMASK_L8_SSHOW;;
;
	lda     #$1E
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ WritePPU (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_WritePPU: near

.segment	"CODE"

;
; PPU_ADDRESS = (uint8_t)(ppu_addr >> 8);
;
	lda     _ppu_addr+1
	sta     $2006
;
; PPU_ADDRESS = (uint8_t)(ppu_addr);
;
	lda     _ppu_addr
	sta     $2006
;
; for (i = 0; i < ppu_data_size; ++i) 
;
	lda     #$00
	sta     _i
L010F:	lda     _i
	cmp     _ppu_data_size
	bcs     L0043
;
; PPU_DATA = ppu_data[i];
;
	lda     _ppu_data
	ldx     _ppu_data+1
	ldy     _i
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     $2007
;
; for (i = 0; i < ppu_data_size; ++i) 
;
	inc     _i
	jmp     L010F
;
; }
;
L0043:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ DrawBackground (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DrawBackground: near

.segment	"CODE"

;
; PPU_ADDRESS = (uint8_t)((PPU_NAMETABLE_0 + NAMETABLE_OFFSET) >> 8);
;
	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = (uint8_t) (PPU_NAMETABLE_0 + NAMETABLE_OFFSET);
;
	sta     $2006
;
; PPU_DATA = BORDER_TL;
;
	lda     #$04
	sta     $2007
;
; for(i = 0; i < (NUM_COLS - 2); ++i)
;
	lda     #$00
	sta     _i
L0110:	lda     _i
	cmp     #$1E
	bcs     L0111
;
; PPU_DATA = BORDER_T;
;
	lda     #$07
	sta     $2007
;
; for(i = 0; i < (NUM_COLS - 2); ++i)
;
	inc     _i
	jmp     L0110
;
; PPU_DATA = BORDER_TR;
;
L0111:	lda     #$05
	sta     $2007
;
; for (i = 0; i < (NUM_ROWS - 2); ++i)
;
	lda     #$00
	sta     _i
L0112:	lda     _i
	cmp     #$1A
	bcs     L0115
;
; PPU_DATA = BORDER_L;
;
	lda     #$06
	sta     $2007
;
; for (j = 0; j < (NUM_COLS - 2); ++j)
;
	lda     #$00
	sta     _j
L0113:	lda     _j
	cmp     #$1E
	bcs     L0114
;
; PPU_DATA = BLANK_TILE;
;
	lda     #$00
	sta     $2007
;
; for (j = 0; j < (NUM_COLS - 2); ++j)
;
	inc     _j
	jmp     L0113
;
; PPU_DATA = BORDER_R;
;
L0114:	lda     #$16
	sta     $2007
;
; for (i = 0; i < (NUM_ROWS - 2); ++i)
;
	inc     _i
	jmp     L0112
;
; PPU_DATA = BORDER_BL;
;
L0115:	lda     #$14
	sta     $2007
;
; for(i = 0; i < (NUM_COLS - 2); ++i)
;
	lda     #$00
	sta     _i
L0116:	lda     _i
	cmp     #$1E
	bcs     L0117
;
; PPU_DATA = BORDER_B;
;
	lda     #$17
	sta     $2007
;
; for(i = 0; i < (NUM_COLS - 2); ++i)
;
	inc     _i
	jmp     L0116
;
; PPU_DATA = BORDER_BR;
;
L0117:	lda     #$15
	sta     $2007
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_addr           = PPU_PALETTE;
;
	ldx     #$3F
	lda     #$00
	sta     _ppu_addr
	stx     _ppu_addr+1
;
; ppu_data           = PALETTES;
;
	lda     #<(_PALETTES)
	sta     _ppu_data
	lda     #>(_PALETTES)
	sta     _ppu_data+1
;
; ppu_data_size      = sizeof(PALETTES);
;
	lda     #$20
	sta     _ppu_data_size
;
; WritePPU();
;
	jsr     _WritePPU
;
; DrawBackground();
;
	jsr     _DrawBackground
;
; player1.x           = (MAX_X / 2) - (SPRITE_WIDTH  / 2) - 50;
;
	lda     #$4A
	sta     _player1+3
;
; player1.y           = (MAX_Y / 2) - (SPRITE_HEIGHT / 2);
;
	lda     #$6F
	sta     _player1
;
; player1.tile_index  = SPRITE_DOWN;
;
	lda     #$10
	sta     _player1+1
;
; player1.attributes  = player1.attributes & 0x00;
;
	lda     #$00
	sta     _player1+2
;
; player2.x           = (MAX_X / 2) - (SPRITE_WIDTH  / 2) + 50;
;
	lda     #$AE
	sta     _player2+3
;
; player2.y           = (MAX_Y / 2) - (SPRITE_HEIGHT / 2);
;
	lda     #$6F
	sta     _player2
;
; player2.tile_index  = SPRITE_DOWN;
;
	lda     #$10
	sta     _player2+1
;
; player2.attributes  = player2.attributes & 0x00;
;
	lda     #$00
	sta     _player2+2
;
; player2.attributes  = player2.attributes | 0x01;
;
	lda     #$01
	sta     _player2+2
;
; ResetScroll();
;
	jsr     _ResetScroll
;
; EnablePPU();
;
	jsr     _EnablePPU
;
; SPEED = WALK;
;
	ldx     #$00
	lda     #$01
	sta     _SPEED
	stx     _SPEED+1
;
; WaitFrame();
;
L00C1:	jsr     _WaitFrame
;
; ResetScroll();
;
	jsr     _ResetScroll
;
; if (InputPort1 & BUTTON_B)
;
	lda     _InputPort1
	ldx     #$00
	and     #$40
	beq     L0119
;
; SPEED = SPRINT;
;
	lda     #$03
;
; } else {
;
	jmp     L0121
;
; SPEED = WALK;
;
L0119:	lda     #$01
L0121:	sta     _SPEED
	stx     _SPEED+1
;
; if (InputPort1 & BUTTON_UP)
;
	lda     _InputPort1
	and     #$08
	beq     L011A
;
; player1.tile_index  = SPRITE_UP;
;
	lda     #$13
	sta     _player1+1
;
; if (player1.y > MIN_Y + SPRITE_HEIGHT)
;
	lda     _player1
	cmp     #$11
	bcc     L011A
;
; player1.y = player1.y - SPEED;
;
	sec
	sbc     _SPEED
	sta     _player1
	txa
	sbc     _SPEED+1
;
; if (InputPort1 & BUTTON_DOWN)
;
L011A:	lda     _InputPort1
	and     #$04
	beq     L011B
;
; player1.tile_index  = SPRITE_DOWN;
;
	lda     #$10
	sta     _player1+1
;
; if (player1.y < MAX_Y - (2 * SPRITE_HEIGHT))
;
	lda     _player1
	cmp     #$D7
	bcs     L011B
;
; player1.y = player1.y + SPEED;;
;
	clc
	adc     _SPEED
	sta     _player1
	txa
	adc     _SPEED+1
;
; if (InputPort1 & BUTTON_LEFT)
;
L011B:	lda     _InputPort1
	and     #$02
	beq     L011C
;
; player1.tile_index  = SPRITE_LEFT;
;
	lda     #$12
	sta     _player1+1
;
; if (player1.x > MIN_X + SPRITE_WIDTH)
;
	lda     _player1+3
	cmp     #$09
	bcc     L011C
;
; player1.x = player1.x - SPEED;
;
	sec
	sbc     _SPEED
	sta     _player1+3
	txa
	sbc     _SPEED+1
;
; if (InputPort1 & BUTTON_RIGHT)
;
L011C:	lda     _InputPort1
	and     #$01
	beq     L011D
;
; player1.tile_index  = SPRITE_RIGHT;
;
	lda     #$11
	sta     _player1+1
;
; if (player1.x < MAX_X - (2 * SPRITE_WIDTH))
;
	lda     _player1+3
	cmp     #$F0
	bcs     L011D
;
; player1.x = player1.x + SPEED;
;
	clc
	adc     _SPEED
	sta     _player1+3
	txa
	adc     _SPEED+1
;
; if (InputPort2 & BUTTON_UP)
;
L011D:	lda     _InputPort2
	and     #$08
	beq     L011E
;
; player2.tile_index  = SPRITE_UP;
;
	lda     #$13
	sta     _player2+1
;
; if (player2.y > MIN_Y + SPRITE_HEIGHT)
;
	lda     _player2
	cmp     #$11
	bcc     L011E
;
; --player2.y;
;
	dec     _player2
;
; if (InputPort2 & BUTTON_DOWN)
;
L011E:	lda     _InputPort2
	and     #$04
	beq     L011F
;
; player2.tile_index  = SPRITE_DOWN;
;
	lda     #$10
	sta     _player2+1
;
; if (player2.y < MAX_Y - (2 * SPRITE_HEIGHT))
;
	lda     _player2
	cmp     #$D7
	bcs     L011F
;
; ++player2.y;
;
	inc     _player2
;
; if (InputPort2 & BUTTON_LEFT)
;
L011F:	lda     _InputPort2
	and     #$02
	beq     L0120
;
; player2.tile_index  = SPRITE_LEFT;
;
	lda     #$12
	sta     _player2+1
;
; if (player2.x > MIN_X + SPRITE_WIDTH)
;
	lda     _player2+3
	cmp     #$09
	bcc     L0120
;
; --player2.x;
;
	dec     _player2+3
;
; if (InputPort2 & BUTTON_RIGHT)
;
L0120:	lda     _InputPort2
	and     #$01
	jeq     L00C1
;
; player2.tile_index  = SPRITE_RIGHT;
;
	lda     #$11
	sta     _player2+1
;
; if (player2.x < MAX_X - (2 * SPRITE_WIDTH))
;
	lda     _player2+3
	cmp     #$F0
	jcs     L00C1
;
; ++player2.x;
;
	inc     _player2+3
;
; while (1)
;
	jmp     L00C1

.endproc

